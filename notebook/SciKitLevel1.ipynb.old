{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T12:57:13.133972Z",
     "start_time": "2020-10-26T12:57:08.978382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already up-to-date: scikit-learn in /opt/app-root/lib/python3.6/site-packages (0.23.2)\n",
      "Requirement already satisfied, skipping upgrade: scipy>=0.19.1 in /opt/app-root/lib/python3.6/site-packages (from scikit-learn) (1.5.2)\n",
      "Requirement already satisfied, skipping upgrade: numpy>=1.13.3 in /opt/app-root/lib/python3.6/site-packages (from scikit-learn) (1.19.1)\n",
      "Requirement already satisfied, skipping upgrade: joblib>=0.11 in /opt/app-root/lib/python3.6/site-packages (from scikit-learn) (0.16.0)\n",
      "Requirement already satisfied, skipping upgrade: threadpoolctl>=2.0.0 in /opt/app-root/lib/python3.6/site-packages (from scikit-learn) (2.1.0)\n",
      "\u001b[33mWARNING: You are using pip version 20.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/opt/app-root/bin/python3.6 -m pip install --upgrade pip' command.\u001b[0m\n",
      "Requirement already satisfied: verta in /opt/app-root/lib/python3.6/site-packages (0.15.6)\n",
      "Requirement already satisfied: requests<3.0,>=2.21 in /opt/app-root/lib/python3.6/site-packages (from verta) (2.23.0)\n",
      "Requirement already satisfied: googleapis-common-protos>=1.5 in /opt/app-root/lib/python3.6/site-packages (from verta) (1.52.0)\n",
      "Requirement already satisfied: pyyaml>=5.1 in /opt/app-root/lib/python3.6/site-packages (from verta) (5.3.1)\n",
      "Requirement already satisfied: pathlib2>=2.2 in /opt/app-root/lib/python3.6/site-packages (from verta) (2.3.5)\n",
      "Requirement already satisfied: protobuf>=3.8 in /opt/app-root/lib/python3.6/site-packages (from verta) (3.13.0)\n",
      "Requirement already satisfied: cloudpickle in /opt/app-root/lib/python3.6/site-packages (from verta) (1.5.0)\n",
      "Requirement already satisfied: click in /opt/app-root/lib/python3.6/site-packages (from verta) (7.1.2)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /opt/app-root/lib/python3.6/site-packages (from requests<3.0,>=2.21->verta) (1.25.10)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/app-root/lib/python3.6/site-packages (from requests<3.0,>=2.21->verta) (2020.4.5.1)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /opt/app-root/lib/python3.6/site-packages (from requests<3.0,>=2.21->verta) (2.9)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /opt/app-root/lib/python3.6/site-packages (from requests<3.0,>=2.21->verta) (3.0.4)\n",
      "Requirement already satisfied: six in /opt/app-root/lib/python3.6/site-packages (from pathlib2>=2.2->verta) (1.15.0)\n",
      "Requirement already satisfied: setuptools in /opt/app-root/lib/python3.6/site-packages (from protobuf>=3.8->verta) (49.2.1)\n",
      "\u001b[33mWARNING: You are using pip version 20.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/opt/app-root/bin/python3.6 -m pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install -U scikit-learn\n",
    "!pip install verta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T12:57:13.723455Z",
     "start_time": "2020-10-26T12:57:13.135894Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.pipeline import Pipeline\n",
    "import joblib\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T13:06:02.671351Z",
     "start_time": "2020-10-26T13:06:02.667299Z"
    }
   },
   "outputs": [],
   "source": [
    "from verta import Client\n",
    "\n",
    "dateTimeObj = datetime.now()\n",
    "timestampStr = dateTimeObj.strftime(\"%d%Y%H%M%S%f\")\n",
    "experiment_id = 'IrisScikit' + timestampStr\n",
    "\n",
    "\n",
    "def record_metrics(expereiment_name, accuracy_score):\n",
    "    client = Client(\"http://chart-1603715522-webapp:3000\")\n",
    "    proj = client.set_project(\"HDFC DEmo PRoject\")\n",
    "    run = client.set_experiment_run(expereiment_name)\n",
    "    run.log_hyperparameters({\"regularization\" : 0.5})\n",
    "    run.log_metric('accuracy', accuracy_score)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T13:06:03.281872Z",
     "start_time": "2020-10-26T13:06:03.277909Z"
    }
   },
   "outputs": [],
   "source": [
    "def main():\n",
    "    model = LogisticRegression()\n",
    "    print('Training model...')\n",
    "    model.fit(X1, y1)\n",
    "    print('Model trained!')\n",
    "    \n",
    "    accuracy = model.score(X2, y2)\n",
    "    print(\"Accuracy: %.2f%%\" % (accuracy*100.0))   \n",
    "    record_metrics(experiment_id, accuracy)\n",
    "    \n",
    "\n",
    "    filename_p = 'IrisClassifier.sav'\n",
    "    print('Saving model in %s' % filename_p)\n",
    "    joblib.dump(model, filename_p)\n",
    "    print('Model saved!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T13:06:04.876881Z",
     "start_time": "2020-10-26T13:06:03.908957Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-10-26 13:06:03,948 [219] WARNING  py.warnings: /opt/app-root/lib/python3.6/site-packages/sklearn/linear_model/_logistic.py:764: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading iris data set...\n",
      "Dataset loaded!\n",
      "Training model...\n",
      "Model trained!\n",
      "Accuracy: 97.78%\n",
      "connection successfully established\n",
      "created new Project: HDFC DEmo PRoject in personal workspace\n",
      "created new Experiment: Expt 21916037175644370854\n",
      "created new ExperimentRun: IrisScikit262020130602669666\n",
      "Saving model in IrisClassifier.sav\n",
      "Model saved!\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    print('Loading iris data set...')\n",
    "    iris = datasets.load_iris()\n",
    "    X, y = iris.data, iris.target\n",
    "    X1, X2, y1, y2 = train_test_split(X, y, random_state=0, train_size=0.7)\n",
    "    print('Dataset loaded!')\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T06:45:36.047531Z",
     "start_time": "2020-10-26T06:45:34.119268Z"
    }
   },
   "outputs": [],
   "source": [
    "!pip install Minio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-26T09:09:31.902271Z",
     "start_time": "2020-10-26T09:09:31.868979Z"
    },
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "from minio import Minio\n",
    "from minio.error import ResponseError\n",
    "from datetime import datetime\n",
    "\n",
    "def get_s3_server():\n",
    "    minioClient = Minio('minio-ml-workshop:9000',\n",
    "                    access_key='minio',\n",
    "                    secret_key='minio123',\n",
    "                    secure=False)\n",
    "\n",
    "    return minioClient\n",
    "\n",
    "minioClient = get_s3_server()\n",
    "minioClient.fput_object(bucket_name='models', object_name=experiment_id  +'/IrisClassifier.sav' , file_path='./IrisClassifier.sav')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
